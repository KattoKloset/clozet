
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  telegram: 'telegram',
  instagram: 'instagram',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contact: 'contact',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  size: 'size',
  color: 'color',
  condition: 'condition',
  purchasePrice: 'purchasePrice',
  salePrice: 'salePrice',
  profit: 'profit',
  supplierId: 'supplierId',
  shipmentGroupId: 'shipmentGroupId',
  dropId: 'dropId',
  createdAt: 'createdAt'
};

exports.Prisma.ItemImageScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  url: 'url',
  position: 'position',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.ShipmentGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  totalItemCost: 'totalItemCost',
  totalShippingCost: 'totalShippingCost',
  averageCost: 'averageCost',
  createdAt: 'createdAt'
};

exports.Prisma.ShipmentBatchScalarFieldEnum = {
  id: 'id',
  name: 'name',
  destination: 'destination',
  status: 'status',
  trackingNumber: 'trackingNumber',
  shippedAt: 'shippedAt',
  createdAt: 'createdAt'
};

exports.Prisma.DropScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startedAt: 'startedAt',
  endedAt: 'endedAt',
  createdAt: 'createdAt'
};

exports.Prisma.CollaboratorAssignmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dropId: 'dropId',
  itemId: 'itemId',
  type: 'type',
  value: 'value'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  shippingFee: 'shippingFee',
  totalAmount: 'totalAmount',
  paymentStatus: 'paymentStatus',
  paymentMethod: 'paymentMethod',
  paymentRef: 'paymentRef',
  proofImage: 'proofImage',
  invoiceUrl: 'invoiceUrl',
  createdAt: 'createdAt'
};

exports.Prisma.BuyerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  telegram: 'telegram',
  instagram: 'instagram',
  address: 'address',
  address2: 'address2',
  postalCode: 'postalCode',
  createdAt: 'createdAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  itemId: 'itemId'
};

exports.Prisma.RentalScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  buyerId: 'buyerId',
  startDate: 'startDate',
  endDate: 'endDate',
  deposit: 'deposit',
  rentalFee: 'rentalFee',
  penalty: 'penalty',
  returnedAt: 'returnedAt',
  returnNotes: 'returnNotes',
  status: 'status'
};

exports.Prisma.ShippingRuleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  region: 'region',
  fee: 'fee',
  maxItems: 'maxItems',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  SELLER: 'SELLER',
  COLLABORATOR: 'COLLABORATOR',
  ADMIN: 'ADMIN'
};

exports.BatchStatus = exports.$Enums.BatchStatus = {
  HOLDING: 'HOLDING',
  AWAITING_PICKUP: 'AWAITING_PICKUP',
  IN_TRANSIT: 'IN_TRANSIT',
  SHIPPED: 'SHIPPED',
  DELIVERED: 'DELIVERED'
};

exports.CommissionType = exports.$Enums.CommissionType = {
  PERCENT_PROFIT: 'PERCENT_PROFIT',
  PERCENT_SALE: 'PERCENT_SALE',
  FLAT: 'FLAT'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  PAYNOW: 'PAYNOW',
  BANK_TRANSFER: 'BANK_TRANSFER',
  STRIPE: 'STRIPE'
};

exports.RentalStatus = exports.$Enums.RentalStatus = {
  UPCOMING: 'UPCOMING',
  ONGOING: 'ONGOING',
  OVERDUE: 'OVERDUE',
  COMPLETED: 'COMPLETED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Supplier: 'Supplier',
  Item: 'Item',
  ItemImage: 'ItemImage',
  ShipmentGroup: 'ShipmentGroup',
  ShipmentBatch: 'ShipmentBatch',
  Drop: 'Drop',
  CollaboratorAssignment: 'CollaboratorAssignment',
  Order: 'Order',
  Buyer: 'Buyer',
  OrderItem: 'OrderItem',
  Rental: 'Rental',
  ShippingRule: 'ShippingRule'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
