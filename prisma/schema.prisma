datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  nickname  String?
  email     String?  @unique
  phone     String?
  telegram  String?
  instagram String?
  role      UserRole // ENUM: SELLER, COLLABORATOR, ADMIN
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders              Order[]
  rentals             Rental[]
  collaboratorOnDrops CollaboratorAssignment[]
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  contact   String?
  notes     String?
  createdAt DateTime @default(now())

  items Item[]
}

model Item {
  id              String         @id @default(cuid())
  name            String
  description     String?
  size            String?
  color           String?
  condition       String?
  purchasePrice   Float
  salePrice       Float?
  profit          Float? // Computed on fetch or update
  supplierId      String?
  supplier        Supplier?      @relation(fields: [supplierId], references: [id])
  shipmentGroupId String?
  shipmentGroup   ShipmentGroup? @relation(fields: [shipmentGroupId], references: [id])

  dropId    String?
  drop      Drop?      @relation(fields: [dropId], references: [id])
  rental    Rental?
  orderItem OrderItem?

  images    ItemImage[]
  createdAt DateTime    @default(now())

  ShipmentBatch ShipmentBatch[] @relation("ItemToShipmentBatch")

  CollaboratorAssignment CollaboratorAssignment[]
}

model ItemImage {
  id         String   @id @default(cuid())
  itemId     String
  item       Item     @relation(fields: [itemId], references: [id])
  url        String
  position   Int // For reordering
  uploadedAt DateTime @default(now())
}

model ShipmentGroup {
  id                String   @id @default(cuid())
  name              String
  totalItemCost     Float
  totalShippingCost Float
  averageCost       Float // Derived: (itemCost + shippingCost) / itemCount
  items             Item[]
  createdAt         DateTime @default(now())
}

model ShipmentBatch {
  id             String      @id @default(cuid())
  name           String
  destination    String
  status         BatchStatus // ENUM: HOLDING, IN_TRANSIT, SHIPPED, DELIVERED
  trackingNumber String?
  shippedAt      DateTime?
  items          Item[]      @relation("ItemToShipmentBatch")
  createdAt      DateTime    @default(now())
}

model Drop {
  id            String                   @id @default(cuid())
  name          String
  startedAt     DateTime
  endedAt       DateTime
  items         Item[]
  collaborators CollaboratorAssignment[]
  createdAt     DateTime                 @default(now())
}

model CollaboratorAssignment {
  id     String         @id @default(cuid())
  userId String
  user   User           @relation(fields: [userId], references: [id])
  dropId String?
  itemId String?
  drop   Drop?          @relation(fields: [dropId], references: [id])
  item   Item?          @relation(fields: [itemId], references: [id])
  type   CommissionType // ENUM: PERCENT_PROFIT, PERCENT_SALE, FLAT
  value  Float
}

model Order {
  id      String @id @default(cuid())
  buyerId String
  buyer   Buyer  @relation(fields: [buyerId], references: [id])

  shippingFee   Float
  totalAmount   Float
  paymentStatus PaymentStatus
  paymentMethod PaymentMethod?
  paymentRef    String?
  proofImage    String?
  invoiceUrl    String?

  orderItems OrderItem[]
  createdAt  DateTime    @default(now())

  User User[]
}

model Buyer {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  telegram  String?
  instagram String?
  address   String?
  address2  String? // Represents the address's apartment, suite, unit number, etc.
  postalCode  String?
  createdAt DateTime @default(now())

  orders  Order[]
  rentals Rental[]
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  itemId  String @unique
  item    Item   @relation(fields: [itemId], references: [id])
  order   Order  @relation(fields: [orderId], references: [id])
}

model Rental {
  id     String @id @default(cuid())
  itemId String @unique
  item   Item   @relation(fields: [itemId], references: [id])

  buyerId String
  buyer   Buyer  @relation(fields: [buyerId], references: [id])

  startDate  DateTime
  endDate    DateTime
  deposit    Float
  rentalFee  Float
  penalty    Float?
  returnedAt DateTime?
  returnNotes String?
  status     RentalStatus

  User User[]
}

model ShippingRule {
  id        String   @id @default(cuid())
  name      String
  region    String
  fee       Float
  maxItems  Int?
  createdAt DateTime @default(now())
}

enum UserRole {
  SELLER
  COLLABORATOR
  ADMIN
}

enum BatchStatus {
  HOLDING
  AWAITING_PICKUP
  IN_TRANSIT
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethod {
  PAYNOW
  BANK_TRANSFER
  STRIPE
}

enum CommissionType {
  PERCENT_PROFIT
  PERCENT_SALE
  FLAT
}

enum RentalStatus {
  UPCOMING
  ONGOING
  OVERDUE
  COMPLETED
}

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

// NextAuth Adapter Tables
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}