services:
  postgres:
    container_name: postgres
    image: postgres:13
    ports:
      - '5432:5432' # expose pg on port 5932 to not collide with pg from elsewhere
    restart: always
    volumes:
      - clozet_db_data:/var/lib/postgresql/data
    env_file: ./app/.env
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust

  nextjs-server:
    container_name: nextjs-server
    build:
      context: ./app
      dockerfile: ./Dockerfile
    ports:
      - '3000:3000'
      - '3001:3001'
    volumes:
      - ./app:/usr/src/app
      - /usr/src/app/node_modules
      - nextjs_cache:/usr/src/app/.next
    env_file: ./app/.env
    depends_on:
      - postgres
    command: 'npm run dev'
  nginx:
    container_name: nginx
    profiles:
      - prod
    ports:
      - '80:80'
      - '443:443'
    build:
      context: ./nginx
      dockerfile: Dockerfile-alpine
    env_file:
      - ./nginx/.env
    volumes:
      - nginx_secrets:/etc/letsencrypt
      - ./nginx/letsencrypt:/var/www/letsencrypt
  prisma-studio:
    container_name: prisma-studio
    image: node:lts-alpine3.17
    working_dir: /usr/src/app
    volumes:
      - ./app:/usr/src/app
    command: npx prisma studio --port 5555 --browser none
    ports:
      - "5555:5555"
    env_file:
      - ./app/.env
    depends_on:
      postgres:
        condition: service_started
      nextjs-server:
        condition: service_started

volumes:
  clozet_db_data:
  nextjs_cache:
  nginx_secrets: